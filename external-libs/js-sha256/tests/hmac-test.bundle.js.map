{
  "version": 3,
  "sources": ["hmac-test.js"],
  "sourcesContent": ["(function (sha256, sha224) {\n  Array.prototype.toHexString = ArrayBuffer.prototype.toHexString = function () {\n    var array = new Uint8Array(this);\n    var hex = '';\n    for (var i = 0; i < array.length; ++i) {\n      var c = array[i].toString('16');\n      hex += c.length === 1 ? '0' + c : c;\n    }\n    return hex;\n  };\n\n  var testCases = {\n    sha256_hmac: {\n      'Test Vectors': {\n        'b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7': [\n          [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b],\n          'Hi There'\n        ],\n        '5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843': [\n          'Jefe',\n          'what do ya want for nothing?'\n        ],\n        '773ea91e36800e46854db8ebd09181a72959098b3ef8c122d9635514ced565fe': [\n          [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa],\n          [0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd]\n        ],\n        '82558a389a443c0ea4cc819899f2083a85f0faa3e578f8077a2e3ff46729665b': [\n          [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19],\n          [0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd]\n        ],\n        '60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54': [\n          [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa],\n          'Test Using Larger Than Block-Size Key - Hash Key First'\n        ],\n        '9b09ffa71b942fcb27635fbcd5b0e944bfdc63644f0713938a7f51535c3a35e2': [\n          [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa],\n          'This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm.'\n        ]\n      },\n      'UTF8': {\n        '865cc329d317f6d9fdbd183a3c5cc5fd4c370d11f98abbbb404bceb1e6392c7e': ['\u4E2D\u6587', '\u4E2D\u6587'],\n        'efeef87be5731506b69bb64a9898a456dd12c94834c36a4d8ba99e3db79ad7ed': ['a\u00E9cio', 'a\u00E9cio'],\n        '8a6e527049b9cfc7e1c84bcf356a1289c95da68a586c03de3327f3de0d3737fe': ['\uD841\uDF0E', '\uD841\uDF0E']\n      }\n    },\n    sha224_hmac: {\n      'Test Vectors': {\n        '896fb1128abbdf196832107cd49df33f47b4b1169912ba4f53684b22': [\n          [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b],\n          'Hi There'\n        ],\n        'a30e01098bc6dbbf45690f3a7e9e6d0f8bbea2a39e6148008fd05e44': [\n          'Jefe',\n          'what do ya want for nothing?'\n        ],\n        '7fb3cb3588c6c1f6ffa9694d7d6ad2649365b0c1f65d69d1ec8333ea': [\n          [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa],\n          [0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd]\n        ],\n        '6c11506874013cac6a2abc1bb382627cec6a90d86efc012de7afec5a': [\n          [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19],\n          [0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd]\n        ],\n        '95e9a0db962095adaebe9b2d6f0dbce2d499f112f2d2b7273fa6870e': [\n          [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa],\n          'Test Using Larger Than Block-Size Key - Hash Key First'\n        ],\n        '3a854166ac5d9f023f54d517d0b39dbd946770db9c2b95c9f6f565d1': [\n          [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa],\n          'This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm.'\n        ]\n      },\n      'UTF8': {\n        'e2280928fe813aeb7fa59aa14dd5e589041bfdf91945d19d25b9f3db': ['\u4E2D\u6587', '\u4E2D\u6587'],\n        '86c53dc054b16f6e006a254891bc9ff0da5df8e1a6faee3b0aaa732d': ['a\u00E9cio', 'a\u00E9cio'],\n        'e9e5991bfb84506b105f800afac1599ff807bb8e20db8ffda48997b9': ['\uD841\uDF0E', '\uD841\uDF0E']\n      }\n    }\n  };\n\n  if (!(typeof JS_SHA256_NO_ARRAY_BUFFER === 'boolean' && JS_SHA256_NO_ARRAY_BUFFER)) {\n    testCases.sha256_hmac.Uint8Array = {\n      'e48411262715c8370cd5e7bf8e82bef53bd53712d007f3429351843b77c7bb9b': [\n        new Uint8Array(0),\n        'Hi There'\n      ]\n    };\n    testCases.sha256_hmac.ArrayBuffer = {\n      'e48411262715c8370cd5e7bf8e82bef53bd53712d007f3429351843b77c7bb9b': [\n        new ArrayBuffer(0),\n        'Hi There'\n      ]\n    };\n    testCases.sha224_hmac.Uint8Array = {\n      'da8f94de91d62154b55ea4e8d6eb133f6d553bcd1f1ba205b9488945': [\n        new ArrayBuffer(0),\n        'Hi There'\n      ]\n    };\n    testCases.sha224_hmac.ArrayBuffer = {\n      'da8f94de91d62154b55ea4e8d6eb133f6d553bcd1f1ba205b9488945': [\n        new ArrayBuffer(0),\n        'Hi There'\n      ]\n    };\n  }\n\n  var errorTestCases = [null, undefined, { length: 0 }, 0, 1, false, true, NaN, Infinity, function () {}];\n\n  function runTestCases(name, algorithm) {\n    var methods = [\n      {\n        name: name,\n        call: algorithm,\n      },\n      {\n        name: name + '.hex',\n        call: algorithm.hex\n      },\n      {\n        name: name + '.array',\n        call: function (key, message) {\n          return algorithm.array(key, message).toHexString();\n        }\n      },\n      {\n        name: name + '.digest',\n        call: function (key, message) {\n          return algorithm.digest(key, message).toHexString();\n        }\n      },\n      {\n        name: name + '.arrayBuffer',\n        call: function (key, message) {\n          return algorithm.arrayBuffer(key, message).toHexString();\n        }\n      }\n    ];\n\n    var classMethods = [\n      {\n        name: 'create',\n        call: function (key, message) {\n          return algorithm.create(key).update(message).toString();\n        }\n      },\n      {\n        name: 'update',\n        call: function (key, message) {\n          return algorithm.update(key, message).toString();\n        }\n      },\n      {\n        name: 'hex',\n        call: function (key, message) {\n          return algorithm.update(key, message).hex();\n        }\n      },\n      {\n        name: 'array',\n        call: function (key, message) {\n          return algorithm.update(key, message).array().toHexString();\n        }\n      },\n      {\n        name: 'digest',\n        call: function (key, message) {\n          return algorithm.update(key, message).digest().toHexString();\n        }\n      },\n      {\n        name: 'arrayBuffer',\n        call: function (key, message) {\n          return algorithm.update(key, message).arrayBuffer().toHexString();\n        }\n      },\n      {\n        name: 'finalize',\n        call: function (key, message) {\n          var hash = algorithm.update(key, message);\n          hash.hex();\n          hash.update(message);\n          return hash.hex();\n        }\n      }\n    ];\n\n    var subTestCases = testCases[name];\n\n    describe(name, function () {\n      methods.forEach(function (method) {\n        describe('#' + method.name, function () {\n          for (var testCaseName in subTestCases) {\n            (function (testCaseName) {\n              var testCase = subTestCases[testCaseName];\n              context('when ' + testCaseName, function () {\n                for (var hash in testCase) {\n                  (function (message, hash) {\n                    it('should be equal', function () {\n                      expect(method.call(message[0], message[1])).to.be(hash);\n                    });\n                  })(testCase[hash], hash);\n                }\n              });\n            })(testCaseName);\n          }\n        });\n      });\n\n      classMethods.forEach(function (method) {\n        describe('#' + method.name, function () {\n          for (var testCaseName in subTestCases) {\n            (function (testCaseName) {\n              var testCase = subTestCases[testCaseName];\n              context('when ' + testCaseName, function () {\n                for (var hash in testCase) {\n                  (function (message, hash) {\n                    it('should be equal', function () {\n                      expect(method.call(message[0], message[1])).to.be(hash);\n                    });\n                  })(testCase[hash], hash);\n                }\n              });\n            })(testCaseName);\n          }\n        });\n      });\n\n      describe('#' + name, function () {\n        errorTestCases.forEach(function (testCase) {\n          context('when ' + testCase, function () {\n            it('should throw error', function () {\n              expect(function () {\n                algorithm(testCase, '');\n              }).to.throwError(/input is invalid type/);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  runTestCases('sha256_hmac', sha256.hmac);\n  runTestCases('sha224_hmac', sha224.hmac);\n})(sha256, sha224);\n"],
  "mappings": "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",
  "names": ["sha256", "sha224", "testCaseName", "hash"]
}
